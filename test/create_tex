#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
import os
from matplotlib import pyplot as pp
from importlib import import_module

import matplotlib2tikz
import testfunctions

# XXX: There seems to be an issue with the legends that do not appear in the
# pdf versions. The old legends are carried over from the previous run and are
# transfered to the next run. I believe this is a problem with the testing
# method, because if one adds print text in _draw_legend pyplot returns the
# correct legends when this test is run


def _main():
    # get command line arguments
    test_dir, test_names = _parse_options()

    if not os.path.isdir(test_dir):
        os.mkdir(test_dir)
    tex_file_path = os.path.join(test_dir, "acid.tex")

    # directory where all the generated files will end up
    data_dir = os.path.join(test_dir, "data")
    if not os.path.isdir(data_dir):
        os.mkdir(data_dir)

    # how to get from the LaTeX file to the data
    tex_relative_path_to_data = "./data"

    figure_width = "7.5cm"

    # open file for writing
    file_handle = open(tex_file_path, "w")

    write_document_header(file_handle, figure_width)

    if test_names:
        test_list = test_names
    else:
        test_list = testfunctions.__all__

    for name in test_list:
        print("Test function %s..." % name)

        # import the test
        test = import_module("testfunctions." + name)

        pp.cla()
        pp.clf()

        # plot the test example
        test.plot()
        tikz_path = os.path.join(data_dir, name + ".tex")
        tikz_tex_path = os.path.join(
            tex_relative_path_to_data, os.path.basename(tikz_path)
        )
        # convert to tikz
        matplotlib2tikz.save(
            tikz_path,
            figurewidth=figure_width,
            tex_relative_path_to_data=tex_relative_path_to_data,
            show_info=False,
        )
        tikz = "\\input{%s}" % tikz_tex_path
        # file_handle.write('\\input{%s}\n' % tikz_tex_path)

        # plot reference figure
        pdf_path = os.path.join(data_dir, name + ".pdf")
        pp.savefig(pdf_path)
        pdf_path = os.path.join(tex_relative_path_to_data, os.path.basename(pdf_path))

        # Open figure, insert PDF
        file_handle.write(
            """%% test plot %s
\\begin{figure}%%
\\centering%%
\\begin{tabular}{cc}
\\includegraphics[width=\\figwidth]{%s}%%
&
%s
\\end{tabular}
\\caption{%s.}%%
\\end{figure}\\clearpage

"""
            % (name, pdf_path, tikz, test.desc)
        )
        print("done.")
    write_document_closure(file_handle)
    file_handle.close()
    return


def write_document_header(file_handle, figure_width):
    """Write the LaTeX document header to the file.
    """
    file_handle.write(
        """\\documentclass[landscape]{scrartcl}
\\usepackage[utf8]{inputenc}
\\usepackage{fontspec}
\\usepackage{graphicx}
\\usepackage{pgfplots}
\\usetikzlibrary{shapes.arrows}
\\usepgfplotslibrary{groupplots}
\\pgfplotsset{compat=newest}
\\newlength\\figwidth%%
\\setlength\\figwidth{%s}
\\begin{document}"""
        % figure_width
    )
    return


def write_document_closure(file_handle):
    """Write the LaTeX document closure to the file.
    """
    file_handle.write("\\end{document}")
    return


def write_file_comparison_entry(file_handle, pdf_path, tikz_path, test_id, comment):
    """Write the Tikz vs. PDF comparison figures to the LaTeX file.
    """
    file_handle.write(
        "% test plot " + str(test_id) + "\n"
        "\\begin{figure}%\n"
        "\\centering%\n"
        "\\begin{tabular}{cc}\n"
        "\includegraphics[width=\\figwidth]"
        "{" + str(pdf_path) + "}%\n"
        "&\n"
        "\input{" + str(tikz_path) + "}%\n"
        "\\end{tabular}\n"
        "\\caption{" + str(comment) + " (test ID " + str(test_id) + ").}%\n"
        "\\end{figure}\\clearpage\n\n"
    )
    return


def _parse_options():
    """Parse input options."""
    import argparse

    parser = argparse.ArgumentParser(description="Acid test for matplotlib2tikz.")
    parser.add_argument(
        "--dir",
        "-d",
        metavar="TEST_DIR",
        type=str,
        default="./tex/",
        help="directory for the test output (default: ./tex/)",
    )
    parser.add_argument(
        "tests",
        metavar="TEST_NAME",
        nargs="*",
        type=str,
        help="tests to perform (default: all)",
    )
    args = parser.parse_args()
    return args.dir, args.tests


if __name__ == "__main__":
    # execute the test
    _main()
